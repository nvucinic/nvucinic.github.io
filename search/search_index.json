{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nvucinic docs page Docs 101 - Work in progress","title":"nvucinic docs page"},{"location":"#nvucinic-docs-page","text":"Docs 101 - Work in progress","title":"nvucinic docs page"},{"location":"kubernetes/","text":"Install Helm Install Helm on to your local machine depending on your local OS. To do this, refer to See Helm install steps Initialize Helm on both your server and client with this command: helm init Please make sure your local system is authenticated to use kubectl. This will install tiller on the Kubernetes cluster which is a server side component that stores all your deployment version for easy rollbacks or rollforwards Configure service account for Helm in GKE Run the following commands to setup and configure tiller to use this service account: kubectl create serviceaccount --namespace kube-system tiller kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller kubectl patch deploy --namespace kube-system tiller-deploy -p '{\"spec\":{\"template\":{\"spec\":{\"serviceAccount\":\"tiller\"}}}}' helm init --service-account tiller --upgrade","title":"Kubernetes"},{"location":"kubernetes/#install-helm","text":"Install Helm on to your local machine depending on your local OS. To do this, refer to See Helm install steps Initialize Helm on both your server and client with this command: helm init Please make sure your local system is authenticated to use kubectl. This will install tiller on the Kubernetes cluster which is a server side component that stores all your deployment version for easy rollbacks or rollforwards","title":"Install Helm"},{"location":"kubernetes/#configure-service-account-for-helm-in-gke","text":"Run the following commands to setup and configure tiller to use this service account: kubectl create serviceaccount --namespace kube-system tiller kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller kubectl patch deploy --namespace kube-system tiller-deploy -p '{\"spec\":{\"template\":{\"spec\":{\"serviceAccount\":\"tiller\"}}}}' helm init --service-account tiller --upgrade","title":"Configure service account for Helm in GKE"},{"location":"prometheus/","text":"Openstack SD config # Scrape OpenStack instances - job_name: 'openstack' openstack_sd_configs: - identity_endpoint: http:// username: vucinic project_name: {{ project_name }} domain_name: Default password: {{ password }} region: {{ region}} role: instance port: 9100 relabel_configs: # Keep only active instances - source_labels: [__meta_openstack_instance_status] action: keep regex: ACTIVE # Keep only instances which are flagged for scraping - source_labels: [__meta_openstack_tag_prometheus_io_scrape] action: keep regex: 'true' # Replace the default instance by the OpenStack instance name - source_labels: [__meta_openstack_instance_name] target_label: instance","title":"Prometheus"},{"location":"prometheus/#openstack-sd-config","text":"# Scrape OpenStack instances - job_name: 'openstack' openstack_sd_configs: - identity_endpoint: http:// username: vucinic project_name: {{ project_name }} domain_name: Default password: {{ password }} region: {{ region}} role: instance port: 9100 relabel_configs: # Keep only active instances - source_labels: [__meta_openstack_instance_status] action: keep regex: ACTIVE # Keep only instances which are flagged for scraping - source_labels: [__meta_openstack_tag_prometheus_io_scrape] action: keep regex: 'true' # Replace the default instance by the OpenStack instance name - source_labels: [__meta_openstack_instance_name] target_label: instance","title":"Openstack SD config"}]}